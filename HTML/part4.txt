MEDIA QUERIES

- So based upon the viewport ( screen view that which the user has from their phone, laptop, etc. )
things may need to be presented a bit differently
- CSS3 introduces @media for this exact purpose
- Apparently for Retina Displays and other high-resolution things, image dimensions 
should be half of their original values

DISPLAY: FLEX
- This CSS instruction says that the element becomes a flexible container
- This allows the creation of rows and columns as decided by the "flex-direction" element
    * The default is: row
    * You can also choose: column, row-reverse, column-reverse
- Flexible containers are capable of several options in spacing child elements: "justify-content"
    * flex-start: This is the default, pushes everything to the left(row) or top(column)
    * flex-end: Pushes everything to the end right(row), bottom(column)
    * space-between: Pushes everything to either side to produce space in the middle
    * space-around: Equal amount of spacing around individual elements [ *  * ]
    * space-evenly: Equal spacing [ * * ] (Notice the difference)
    * center: Most common, pushes everything to the middle
- Whereas the above options are for the main axis of the flex container,
you may also choose to align via the cross axis ( a vertical line for rows or a horizontal line for columns )
    * flex-start: pushes things to the top(row) or left(column)
    * flex-end: pushes things to the bottom(row) or right(column)
    * center: same shit as the center above
    * stretch: this is the default. The items fill the flex container
    * baseline: Aligns item to the text baseline, the invisible line upon which letters sit
- You can have multiple rows/columns by wrapping the items via "flex-wrap"
    * nowrap: This is the default. Everything is forced into one row
    * wrap: Depending upon the size of the container and its items, a new row/column will begin
    on the next line
    * wrap-reverse: Same thing, but in the opposite direction
- Flex container items can shrink or grow: flex-shrink or flex-grow
    * If you want CSS to have a basis before making adjustments, use flex-basis
    followed by an actual measurement (px, em, %, auto, etc.)
    * You can shorthand the shit by doing: flex: growth shrink baseline
- If you want to order things PACIFICALLY, you can use the "order" element

    <style>
        @media ( min-height: 100px ) {
            // CSS rules for any viewport 
            // x >= 100px

            // You could also do: max-height, min-width, max-width
        }

        // These are generally appealing settings on an image
        img {
            // The width of the image will never exceed the page's width
            max-width: 100%;
            // The aspect ratio of the image will remain constant
            height: auto;
        }

        #box-1 {
            order: 2;
        }

        #box-2 {
            // box-2 come before box-1 despite how they're read by HTML
            order: 1;
        }

        p {
            // You can use size units relative to the VIEWPORT
            // to resize things: 
            //  * vh (relative to screen height)
            //  * vw (relative to screen width)
            //  * vmin (relative to smallest screen dimension)
            //  * vmax (relative to largest screen dimension)
            width: 75vh;
        }
    </style>

CSS GRIDS

- You can further say "No u" to website creation by creating whole ass grids with CSS
- Instead of a boring ass display mode of "fLex" you can throw that pussy shit away
and deal with a real man's kickass mode of "G R I D" *explosions*

- Things you can use as measurements: auto, px, %, fr
    * auto = The row/column is as wide as the stuff it holds
    * px = absolute pixel measurment
    * % = A certain percentage of the container's width;
    * fr (fraction) = Any remaining space is split evenly into a fraction
        - If I do something like: grid-template-rows: 2fr 1fr
        - A grid of 2 rows are created in which the container's width is split into 3 (1fr + 2fr)
        - Row 1 gets 2/3 of the width, and Row 2 gets the final 1/3

- justify-self and align-self to align things within their cells
    * start, center, end

- justify-items to align everything in their cells (display: grid)
    * start, center, end

- grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;
    * Basically another way to specify which areas an item will C O N S U M E

- If for some ungodly reason you need like 100 rows/columns, you can use the repeat() function
    * grid-template-columns (or rows): repeat( 100, 1fr 30px ); 
    * Template: ( iterations, what-to-repeat );

- In case that the grid container size changes for whatever fucking reason, you have the minmax() function
    * This thing says the the row/column width is at a minimum X units or a maximum Y units
    * minmax( smallest, largest );

- Use of "auto-fill" has CSS automatically fill the rows/columns with your desired sizes
    * There's also "auto-fit"
        - The only difference is how they fit items into the containers
        - "auto-fill" puts as many items and empty cells to fit into the row until it wraps
        - "auto-fit"  will remove those extra empty cells and just stretch the items

    <style>
        .container {
            display: grid;
            // The number of values corresponds with the number of columns
            // The variables here are width measurements
            // grid-template-rows is also a thing
            grid-template-columns: x y z ...

            // vertical space of 10px between items
            // grid-column-gap is also a thing
            grid-row-gap: 10px;
        }

        p {
            // This splits and/or groups items together under a single name
            // Periods (.) are denoted as empty cells
            // Each word is a cell, each pair of quotations is a row
            grid-template-areas: 
                "header header header"
                ". content content"
                "footer footer footer";

            // With the names above, you can assign items to some cell(s) by 
            // specifying its grid-area name.
            // Given that the entire top row is titled "header," items of 
            // this name will take up the whole row.
            grid-area: header;

        }

        .convenience {
            // This is the shorthand for gaps
            // Only 1 number means 20px for row & column
            // Two numbers mean: first for the row, and the other for the column
            grid-gap: 20px;

            // You can say how many columns/rows an item can C O N S U M E
            // by setting the grid-column option
            // Assume 4 invisible lines splitting the grid up numbered 1 - 4
            // This item will consume lines 1 - 3 or 2 columns
            // Line Numbers = Columns-Wanted + 1;
            grid-column: 1 / 3;
        }
    </style>